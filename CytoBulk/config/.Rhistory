lrdb$lr_co_ratio_pvalue <- 1
rownames(lrdb) <- 1:nrow(lrdb)
# calculate co-expression ratio
if (nrow(lrdb) == 1) {
ndata_lr <- ndata_ligand * ndata_receptor
lrdb$lr_co_exp_num <- length(ndata_lr[ndata_lr > 0])
lrdb$lr_co_ratio <- length(ndata_lr[ndata_lr > 0])/length(ndata_lr)
} else {
ndata_ligand <- st_data[lrdb$ligand, cell_pair$cell_sender]
ndata_receptor <- st_data[lrdb$receptor, cell_pair$cell_receiver]
ndata_lr <- cbind(ndata_ligand, ndata_receptor)
lrdb$lr_co_ratio <- apply(ndata_lr, 1, .co_exp)
lrdb$lr_co_exp_num <- apply(ndata_lr, 1, .co_exp) * nrow(cell_pair)
}
# permutation test
res_per <- list()
for (j in 1:per_num) {
set.seed(j)
cell_id <- sample(x = 1:ncol(st_data), size = nrow(cell_pair) * 2, replace = T)
ndata_ligand <- st_data[lrdb$ligand, cell_id[1:(length(cell_id)/2)]]
ndata_receptor <- st_data[lrdb$receptor, cell_id[(length(cell_id)/2 + 1):length(cell_id)]]
if (nrow(lrdb) == 1) {
ndata_lr <- ndata_ligand * ndata_receptor
res_per[[j]] <- length(ndata_lr[ndata_lr > 0])/length(ndata_lr)
} else {
ndata_lr <- cbind(ndata_ligand, ndata_receptor)
res_per[[j]] <- apply(ndata_lr, 1, .co_exp)
}
}
names(res_per) <- paste0("P", 1:length(res_per))
res_per <- as.data.frame(res_per)
res_per$real <- lrdb$lr_co_ratio
lrdb$lr_co_ratio_pvalue <- apply(res_per, 1, .co_exp_p)
lrdb <- lrdb[lrdb$lr_co_ratio_pvalue < pvalue, ]
return(lrdb)
}
.generate_ggi_res <- function(ggi_tf, cell_pair, receptor_name, st_data, max_hop, co_exp_ratio) {
.co_exp <- function(x) {
x_1 <- x[1:(length(x)/2)]
x_2 <- x[(length(x)/2 + 1):length(x)]
x_12 <- x_1 * x_2
x_12_ratio <- length(x_12[x_12 > 0])/length(x_12)
return(x_12_ratio)
}
.co_exp_batch <- function(st_data, ggi_res, cell_pair) {
ggi_res_temp <- unique(ggi_res[, c("src", "dest")])
cell_receiver <- unique(cell_pair$cell_receiver)
m <- floor(nrow(ggi_res_temp)/5000)
i <- 1
res <- NULL
while (i <= (m + 1)) {
m_int <- 5000 * i
if (m_int < nrow(ggi_res_temp)) {
ggi_res_temp1 <- ggi_res_temp[((i - 1) * 5000 + 1):(5000 * i), ]
} else {
if (m_int == nrow(ggi_res_temp)) {
ggi_res_temp1 <- ggi_res_temp[((i - 1) * 5000 + 1):(5000 * i), ]
i <- i + 1
} else {
ggi_res_temp1 <- ggi_res_temp[((i - 1) * 5000 + 1):nrow(ggi_res_temp), ]
}
}
ndata_src <- st_data[ggi_res_temp1$src, cell_receiver]
ndata_dest <- st_data[ggi_res_temp1$dest, cell_receiver]
ndata_gg <- cbind(ndata_src, ndata_dest)
# calculate co-expression
ggi_res_temp1$co_ratio <- NA
ggi_res_temp1$co_ratio <- apply(ndata_gg, 1, .co_exp)
res <- rbind(res, ggi_res_temp1)
i <- i + 1
}
res$merge_key <- paste0(res$src, res$dest)
ggi_res$merge_key <- paste0(ggi_res$src, ggi_res$dest)
ggi_res <- merge(ggi_res, res, by = "merge_key", all.x = T, sort = F)
ggi_res <- ggi_res[, c(2:6, 9)]
colnames(ggi_res) <- c("src", "dest", "src_tf", "dest_tf", "hop", "co_ratio")
return(ggi_res)
}
# generate ggi_res
ggi_res <- NULL
ggi_tf1 <- ggi_tf[ggi_tf$src == receptor_name, ]
ggi_tf1 <- unique(ggi_tf1[ggi_tf1$dest %in% rownames(st_data), ])
n <- 0
ggi_tf1$hop <- n + 1
while (n <= max_hop) {
ggi_res <- rbind(ggi_res, ggi_tf1)
ggi_tf1 <- ggi_tf[ggi_tf$src %in% ggi_tf1$dest, ]
ggi_tf1 <- unique(ggi_tf1[ggi_tf1$dest %in% rownames(st_data), ])
if (nrow(ggi_tf1) == 0) {
break
}
ggi_tf1$hop <- n + 2
n <- n + 1
}
ggi_res <- unique(ggi_res)
# ndata_src and ndata_dest
ggi_res_temp <- unique(ggi_res[, c("src", "dest")])
if (nrow(ggi_res_temp) >= 5000) {
ggi_res <- .co_exp_batch(st_data, ggi_res, cell_pair)
} else {
ndata_src <- st_data[ggi_res$src, cell_pair$cell_receiver]
ndata_dest <- st_data[ggi_res$dest, cell_pair$cell_receiver]
ndata_gg <- cbind(ndata_src, ndata_dest)
# calculate co-expression
ggi_res$co_ratio <- NA
ggi_res$co_ratio <- apply(ndata_gg, 1, .co_exp)
}
ggi_res <- ggi_res[ggi_res$co_ratio > co_exp_ratio, ]
return(ggi_res)
}
.co_exp_batch <- function(st_data, ggi_res, cell_pair) {
ggi_res_temp <- unique(ggi_res[, c("src", "dest")])
cell_receiver <- unique(cell_pair$cell_receiver)
m <- floor(nrow(ggi_res_temp)/5000)
i <- 1
res <- NULL
while (i <= (m + 1)) {
m_int <- 5000 * i
if (m_int < nrow(ggi_res_temp)) {
ggi_res_temp1 <- ggi_res_temp[((i - 1) * 5000 + 1):(5000 * i), ]
} else {
if (m_int == nrow(ggi_res_temp)) {
ggi_res_temp1 <- ggi_res_temp[((i - 1) * 5000 + 1):(5000 * i), ]
i <- i + 1
} else {
ggi_res_temp1 <- ggi_res_temp[((i - 1) * 5000 + 1):nrow(ggi_res_temp), ]
}
}
ndata_src <- st_data[ggi_res_temp1$src, cell_receiver]
ndata_dest <- st_data[ggi_res_temp1$dest, cell_receiver]
ndata_gg <- cbind(ndata_src, ndata_dest)
# calculate co-expression
ggi_res_temp1$co_ratio <- NA
ggi_res_temp1$co_ratio <- apply(ndata_gg, 1, .co_exp)
res <- rbind(res, ggi_res_temp1)
i <- i + 1
}
res$merge_key <- paste0(res$src, res$dest)
ggi_res$merge_key <- paste0(ggi_res$src, ggi_res$dest)
ggi_res <- merge(ggi_res, res, by = "merge_key", all.x = T, sort = F)
ggi_res <- ggi_res[, c(2:6, 9)]
colnames(ggi_res) <- c("src", "dest", "src_tf", "dest_tf", "hop", "co_ratio")
return(ggi_res)
}
.generate_tf_gene_all <- function(ggi_res, max_hop) {
tf_gene_all <- NULL
ggi_hop <- ggi_res[ggi_res$hop == 1, ]
for (k in 1:max_hop) {
ggi_hop_yes <- ggi_hop[ggi_hop$dest_tf == "YES", ]
if (nrow(ggi_hop_yes) > 0) {
ggi_hop_tf <- ggi_res[ggi_res$hop == k + 1, ]
if (nrow(ggi_hop_tf) > 0) {
ggi_hop_yes <- ggi_hop_yes[ggi_hop_yes$dest %in% ggi_hop_tf$src, ]
if (nrow(ggi_hop_yes) > 0) {
tf_gene <- ggi_hop_yes$hop
names(tf_gene) <- ggi_hop_yes$dest
tf_gene_all <- c(tf_gene_all, tf_gene)
}
}
}
ggi_hop_no <- ggi_hop[ggi_hop$dest_tf == "NO", ]
ggi_hop <- ggi_res[ggi_res$hop == k + 1, ]
ggi_hop <- ggi_hop[ggi_hop$src %in% ggi_hop_no$dest, ]
}
return(tf_gene_all)
}
obj <- dec_cci_test(object = obj,
celltype_sender = 'Fibroblasts',
celltype_receiver = 'Endocrine_cells',if_doParallel = F)
obj
library(SpaTalk)
# As single-cell st_data
t1<-Sys.time()
load(paste0(system.file(package = 'SpaTalk'), "/extdata/starmap_data.rda"))
load(paste0(system.file(package = 'SpaTalk'), "/extdata/starmap_meta.rda"))
starmap_meta <- read.csv(file = 'D:/project/pathway/demo/sc_agg_meta_1.csv')
starmap_data <- read.csv(file = 'D:/project/pathway/demo/sc_agg_exp_n.csv',row.names = 1)
lrpairs<- read.csv(file = 'D:/project/pathway/config/lr_pairs_0.csv')
obj <- createSpaTalk(st_data = as.matrix(starmap_data),
st_meta = starmap_meta[, -4],
species = "Human",
if_st_is_sc = T,
spot_max_cell = 1,
celltype = starmap_meta$celltype)
obj <- find_lr_path(object = obj, lrpairs = lrpairs, pathways = pathways)
obj <- dec_cci(object = obj,
celltype_sender = 'Fibroblasts',
celltype_receiver = 'Endocrine_cells')
t2<-Sys.time()
print(t2-t1)
source("D:/project/casuality/casuality/script/utils.R")
opt <- list()
opt$rna_fn <- 'D:/project/casuality/casuality/data/RNA_GSE135851_AML.csv'
opt$meta_fn <- 'D:/project/casuality/casuality/data/cell_meta_GSE135851_AML.csv'
opt$out_dir <- 'D:/project/casuality/casuality/out/'
opt$project <- 'GSE135851_AML'
run <- function(opt){
print("read meta data")
opt <- read_meta_data(opt)
print("read rna data")
opt$rna_data <- read_rna_data(opt)
print("calculate GRN for each sample")
corr_df <- run_ppcor(opt)
genie3_df <- run_genie3(opt)
print("finished")
}
run(opt)
data = Read10X_h5("C:\Users\xywang85\Downloads\BRCA_GSE110686_expression.h5", use.names = TRUE, unique.features = TRUE)
data = Read10X_h5("C:/Users/xywang85/Downloads/BRCA_GSE110686_expression.h5", use.names = TRUE, unique.features = TRUE)
library(rhdf5r)
library(hdf5r)
install.packages("hdf5r")
library(hdf5r)
data = Read10X_h5("C:/Users/xywang85/Downloads/BRCA_GSE110686_expression.h5", use.names = TRUE, unique.features = TRUE)
library(Seurat)
data = Read10X_h5("C:/Users/xywang85/Downloads/BRCA_GSE110686_expression.h5", use.names = TRUE, unique.features = TRUE)
library(loomR)
install.packages("loomR")]
install.packages("loomR")
install.packages("remotes")
remotes::install_github("mojaveazure/loomR")
library(loomR)
sdata.loom <- as.loom(x = data, filename = "./B265-multiclone.loom", verbose = FALSE)
library(loomR)
data.loom <- as.loom(x = data, filename = "./B265-multiclone.loom", verbose = FALSE)
data.loom <- as.loom(x = data, filename = "C:/Users/xywang85/Downloads/BRCA_GSE110686_expression.loom", verbose = FALSE)
library(Seurat)
library(loomR)
data.loom <- as.loom(x = data, filename = "C:/Users/xywang85/Downloads/BRCA_GSE110686_expression.loom", verbose = FALSE)
library(SeuratDisk)
remotes::install_github("mojaveazure/seurat-disk")
library(SeuratDisk)
data <- LoadH5Seurat(
"C:/Users/xywang85/Downloads/BRCA_GSE110686_expression.h5",
assays = NULL,
reductions = NULL,
graphs = NULL,
images = NULL,
meta.data = TRUE,
commands = TRUE,
misc = is.null(x = assays),
tools = is.null(x = assays),
verbose = TRUE,
...
)
data <- LoadH5Seurat(
"C:/Users/xywang85/Downloads/BRCA_GSE110686_expression.h5",
assays = NULL,
reductions = NULL,
graphs = NULL,
images = NULL,
meta.data = TRUE,
commands = TRUE,
misc = is.null(x = assays),
tools = is.null(x = assays),
verbose = TRUE,
)
data <- LoadH5Seurat(
"C:/Users/xywang85/Downloads/BRCA_GSE110686_expression.h5",
assays = NULL,
reductions = NULL,
graphs = NULL,
images = NULL,
meta.data = TRUE,
commands = TRUE,
misc = is.null(x = assays),
tools = is.null(x = assays),
verbose = TRUE,
)
data = Read10X_h5("C:/Users/xywang85/Downloads/BRCA_GSE110686_expression.h5", use.names = TRUE, unique.features = TRUE)
data_seurat <- CreateSeuratObject(data,project = "BRCA_GSE110686")
data_seurat
Convert(
data_seurat,
dest = "h5ad",
assay = DefaultAssay(object = source),
overwrite = FALSE,
verbose = TRUE,
)
library(SeuratDisk)
Convert(
data_seurat,
dest = "h5ad",
assay = DefaultAssay(object = "BRCA_GSE110686"),
overwrite = FALSE,
verbose = TRUE,
)
data_seurat
library(SeuratDisk)
Convert(
"C:/Users/xywang85/Downloads/BRCA_GSE110686_expression.h5",
dest = "h5ad",
assay = DefaultAssay(object = "BRCA_GSE110686"),
overwrite = FALSE,
verbose = TRUE,
)
SaveH5Seurat(data_seurat, filename = "C:/Users/xywang85/Downloads/BRCA_GSE110686_expression.h5Seurat")
Convert(
"C:/Users/xywang85/Downloads/BRCA_GSE110686_expression.h5Seurat",
dest = "h5ad",
assay = DefaultAssay(object = "BRCA_GSE110686"),
overwrite = FALSE,
verbose = TRUE,
)
Convert(
"C:/Users/xywang85/Downloads/BRCA_GSE110686_expression.h5Seurat",
dest = "h5ad",
)
Convert(
"C:/Users/xywang85/Downloads/BRCA_GSE110686_expression.h5Seurat",
dest = "h5ad",
)
celldata=read.table(file = "C:/Users/xywang85/Downloads/BRCA_GSE110686_CellMetainfo_table.tsv",
sep="\t")
data_seurat=AddMetaData(data_seurat,metadata = celldata)
SaveH5Seurat(data_seurat, filename = "C:/Users/xywang85/Downloads/BRCA_GSE110686_expression.h5Seurat")
SaveH5Seurat(data_seurat, filename = "C:/Users/xywang85/Downloads/BRCA_GSE110686_expression.h5Seurat")
Convert(
"C:/Users/xywang85/Downloads/BRCA_GSE110686_expression.h5Seurat",
dest = "h5ad",
)
data = Read10X_h5("C:/Users/xywang85/Downloads/BRCA_GSE110686_expression.h5", use.names = TRUE, unique.features = TRUE)
data_seurat <- CreateSeuratObject(data,project = "BRCA_GSE110686")
celldata=read.table(file = "C:/Users/xywang85/Downloads/BRCA_GSE110686_CellMetainfo_table.tsv",
sep="\t")
data_seurat=AddMetaData(data_seurat,metadata = celldata)
SaveH5Seurat(data_seurat, filename = "C:/Users/xywang85/Downloads/BRCA_GSE110686_expression.h5Seurat")
Convert(
"C:/Users/xywang85/Downloads/BRCA_GSE110686_expression.h5Seurat",
dest = "h5ad",
)
data = Read10X_h5("C:/Users/xywang85/Downloads/BRCA_GSE110686_expression.h5", use.names = TRUE, unique.features = TRUE)
data_seurat <- CreateSeuratObject(data,project = "BRCA_GSE110686")
celldata=read.table(file = "C:/Users/xywang85/Downloads/BRCA_GSE110686_CellMetainfo_table(1).tsv",
sep="\t")
data_seurat=AddMetaData(data_seurat,metadata = celldata)
SaveH5Seurat(data_seurat, filename = "C:/Users/xywang85/Downloads/BRCA_GSE110686_expression.h5Seurat")
Convert(
"C:/Users/xywang85/Downloads/BRCA_GSE110686_expression.h5Seurat",
dest = "h5ad",
)
data = Read10X_h5("C:/Users/xywang85/Downloads/BRCA_GSE110686_expression.h5", use.names = TRUE, unique.features = TRUE)
data_seurat <- CreateSeuratObject(data,project = "BRCA_GSE110686")
celldata=read.table(file = "C:/Users/xywang85/Downloads/BRCA_GSE110686_CellMetainfo_table (1).tsv",
sep="\t")
data_seurat=AddMetaData(data_seurat,metadata = celldata)
SaveH5Seurat(data_seurat, filename = "C:/Users/xywang85/Downloads/BRCA_GSE110686_expression.h5Seurat")
Convert(
"C:/Users/xywang85/Downloads/BRCA_GSE110686_expression.h5Seurat",
dest = "h5ad",
)
data
data_seurat
data_seurat@metadata
data_seurat@meta.data
data = Read10X_h5("C:/Users/xywang85/Downloads/BRCA_GSE110686_expression.h5", use.names = TRUE, unique.features = TRUE)
data_seurat <- CreateSeuratObject(data,project = "BRCA_GSE110686")
celldata=read.table(file = "C:/Users/xywang85/Downloads/BRCA_GSE110686_CellMetainfo_table (1).tsv",
sep="\t")
data_seurat=AddMetaData(data_seurat,metadata = celldata)
data_seurat@meta.data
umap_data <- RunUMAP(data_seurat)
data = Read10X_h5("C:/Users/xywang85/Downloads/BRCA_GSE110686_expression.h5", use.names = TRUE, unique.features = TRUE)
data_seurat <- CreateSeuratObject(data,project = "BRCA_GSE110686")
celldata=read.table(file = "C:/Users/xywang85/Downloads/BRCA_GSE110686_CellMetainfo_table (1).tsv",
sep="\t")
data_seurat=AddMetaData(data_seurat,metadata = celldata)
data_seurat@meta.data
umap_data <- RunUMAP(data_seurat,dims=2)
data_seurat <- NormalizeData(object = data_seurat)
data_seurat <- FindVariableFeatures(object = data_seurat)
data_seurat <- ScaleData(object = data_seurat)
data_seurat <- RunPCA(object = data_seurat)
data_seurat <- FindNeighbors(object = data_seurat)
data_seurat <- FindClusters(object = data_seurat)
data_seurat <- RunTSNE(object = data_seurat)
data_seurat <- RunUMAP(data_seurat,dims=2)
data_seurat <- RunUMAP(data_seurat)
data_seurat <- RunUMAP(data_seurat,dims=2)
data_seurat <- RunUMAP(data_seurat,dims=1:2)
data_seurat
plot1<-DimPlot(pbmc, reduction = "umap",label = TRUE)+scale_color_npg()
plot2<-DimPlot(pbmc, reduction = "tsne",label = TRUE)+scale_color_npg()
CombinePlots(plots = list(plot1, plot2),legend="bottom")
plot1<-DimPlot(data_seurat, reduction = "umap",label = TRUE)+scale_color_npg()
plot2<-DimPlot(data_seurat, reduction = "tsne",label = TRUE)+scale_color_npg()
CombinePlots(plots = list(plot1, plot2),legend="bottom")
library(ggsci)
plot1<-DimPlot(data_seurat, reduction = "umap",label = TRUE)+scale_color_npg()
plot2<-DimPlot(data_seurat, reduction = "tsne",label = TRUE)+scale_color_npg()
CombinePlots(plots = list(plot1, plot2),legend="bottom")
data_seurat <- RunUMAP(data_seurat,dims=1:10)
#SaveH5Seurat(data_seurat, filename = "C:/Users/xywang85/Downloads/BRCA_GSE110686_expression.h5Seurat")
plot1<-DimPlot(data_seurat, reduction = "umap",label = TRUE)+scale_color_npg()
plot2<-DimPlot(data_seurat, reduction = "tsne",label = TRUE)+scale_color_npg()
CombinePlots(plots = list(plot1, plot2),legend="bottom")
data_seurat@umap
data_seurat
FetchData(data_seurat)
data_seurat.ident
Key(object = data_seurat)
FetchData(data_seurat,var="umap")
FetchData(data_seurat,var=umap)
FetchData(data_seurat,var="UMAP_")
FetchData(data_seurat,vars="UMAP_")
data = Read10X_h5("C:/Users/xywang85/Downloads/BRCA_EMTAB8107_expression.h5", use.names = TRUE, unique.features = TRUE)
data_seurat <- CreateSeuratObject(data,project = "BRCA_EMTAB8107")
celldata=read.table(file = "C:/Users/xywang85/Downloads/BRCA_EMTAB8107_CellMetainfo_table.tsv",
sep="\t")
data_seurat=AddMetaData(data_seurat,metadata = celldata)
SaveH5Seurat(data_seurat, filename = "C:/Users/xywang85/Downloads/BRCA_EMTAB8107_expression.h5Seurat")
Convert(
"C:/Users/xywang85/Downloads/BRCA_EMTAB8107_expression.h5Seurat",
dest = "h5ad",
)
data = Read10X_h5("C:/Users/xywang85/Downloads/BRCA_GSE114727_inDrop_expression.h5", use.names = TRUE, unique.features = TRUE)
data_seurat <- CreateSeuratObject(data,project = "BRCA_GSE114727_inDrop")
celldata=read.table(file = "C:/Users/xywang85/Downloads/BRCA_GSE114727_inDrop_CellMetainfo_table.tsv",
sep="\t")
data_seurat=AddMetaData(data_seurat,metadata = celldata)
SaveH5Seurat(data_seurat, filename = "C:/Users/xywang85/Downloads/BRCA_GSE114727_inDrop_expression.h5Seurat")
Convert(
"C:/Users/xywang85/Downloads/BRCA_GSE114727_inDrop_expression.h5Seurat",
dest = "h5ad",
)
opt <- list()
opt$rna_fn <- 'D:/project/casuality/casuality/data/RNA_GSE135851_AML.csv'
opt$meta_fn <- 'D:/project/casuality/casuality/data/cell_meta_GSE135851_AML.csv'
opt$out_dir <- 'D:/project/casuality/casuality/out/'
opt$project <- 'GSE135851_AML'
source("D:/project/casuality/casuality/script/utils.R")
run(opt)
source("D:/project/casuality/casuality/script/utils.R")
run <- function(opt){
print("read meta data")
opt <- read_meta_data(opt)
print("read rna data")
opt$rna_data <- read_rna_data(opt)
print("calculate GRN for each sample")
corr_df <- run_ppcor(opt)
genie3_df <- run_genie3(opt)
print("finished")
}
opt <- list()
opt$rna_fn <- 'D:/project/casuality/casuality/data/RNA_NSCLC_GSE153935.csv'
opt$meta_fn <- 'D:/project/casuality/casuality/data/cell_meta_GSE153935_NSCLC.csv'
opt$out_dir <- 'D:/project/casuality/casuality/out/'
opt$project <- 'GSE135851_AML'
run(opt)
opt <- list()
opt$rna_fn <- 'D:/project/casuality/casuality/data/RNA_NSCLC_GSE153935.csv'
opt$meta_fn <- 'D:/project/casuality/casuality/data/cell_meta_GSE153935_NSCLC.csv'
opt$out_dir <- 'D:/project/casuality/casuality/out/'
opt$project <- 'NSCLC_GSE153935'
run(opt)
opt$rna_fn <- 'D:/project/casuality/casuality/data/RNA_NSCLC_GSE153935.csv'
opt$meta_fn <- 'D:/project/casuality/casuality/data/cell_meta_GSE153935_NSCLC.csv'
opt$out_dir <- 'D:/project/casuality/casuality/out/'
opt$project <- 'NSCLC_GSE153935'
run(opt)
opt <- list()
opt$rna_fn <- 'D:/project/casuality/casuality/data/RNA_NSCLC_GSE153935.csv'
opt$meta_fn <- 'D:/project/casuality/casuality/data/cell_meta_GSE153935_NSCLC.csv'
opt$out_dir <- 'D:/project/casuali
opt <- list()
opt$rna_fn <- 'D:/project/casuality/casuality/data/RNA_NSCLC_GSE153935.csv'
opt$meta_fn <- 'D:/project/casuality/casuality/data/cell_meta_GSE153935_NSCLC.csv'
opt$out_dir <- 'D:/project/casuality/casuality/out/'
opt$project <- 'NSCLC_GSE153935'
opt <- list()
opt$rna_fn <- 'D:/project/casuality/casuality/data/RNA_NSCLC_GSE153935.csv'
opt$meta_fn <- 'D:/project/casuality/casuality/data/cell_meta_GSE153935_NSCLC.csv'
opt$out_dir <- 'D:/project/casuality/casuality/out/'
opt$project <- 'NSCLC_GSE153935'
run(opt)
install.packages('devtools')
devtools::install_github('YingMa0107/CARD')
library(TxDb.Hsapiens.UCSC.hg38.knownGene)
library(GenomicFeatures)
library(dplyr)
library(tibble)
setwd("D:/project/deconvolution_algorithm/coding/Spatial_mapping/CytoBulk/config/")
txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene
exons <- exonsBy(txdb, by = "gene")
exon_lengths <- exons %>%
purrr::map(function(x) sum(width(x))) %>%
data.frame(lengths = unlist(.)) %>%
rownames_to_column("geneSymbol")
exons
if (!requireNamespace("AnnotationDbi", quietly = TRUE))
BiocManager::install("AnnotationDbi")
library(AnnotationDbi)
exon_lengths <- sapply(exons, function(x) sum(width(x)))
exon_lengths
gene_ids <- names(exon_lengths)
gene_symbols <- select(txdb, keys = gene_ids, columns = c("SYMBOL"), keytype = "GENEID")
if (!requireNamespace("org.Hs.eg.db", quietly = TRUE))
BiocManager::install("org.Hs.eg.db")
library(org.Hs.eg.db)
gene_symbols <- select(org.Hs.eg.db, keys = gene_ids, columns = "SYMBOL", keytype = "ENTREZID")
gene_ids <- names(exon_lengths)
gene_ids
gene_symbols <- select(org.Hs.eg.db, keys = gene_ids, columns = "SYMBOL", keytype = "ENTREZID")
gene_symbols <- mapIds(org.Hs.eg.db, keys = gene_ids, column = "SYMBOL", keytype = "ENTREZID", multiVals = "first")
gene_symbols
# Merge lengths and symbols
exon_lengths_df <- data.frame(geneID = gene_ids, lengths = exon_lengths, row.names = NULL)
exon_lengths_df$SYMBOL <- gene_symbols
# Remove geneID column and reorder columns
exon_lengths_df <- exon_lengths_df[, c("SYMBOL", "lengths")]
exon_lengths_df
write.table(exon_lengths_df, file = "gene_length.txt", sep = "\t", quote = FALSE, row.names = FALSE)
